ENVIRONMENT VARIABLES (dotenv) 
- documentation: https://www.npmjs.com/package/dotenv 
- a library which enables file-based storing of environment variables
- installation: npm install dotenv
- create a hidden (.env) file in the server directory
- do not commit to github repo (add .env to .gitignore)
- syntax:
    FIRST_SECRET_KEY="first key value"
    SECOND_SECRET_KEY="second key value"
- include the following in server.js:
    require('dotenv').config();
- requires the dotenv library and invokes its config function
- retrieve the values from the process.env object with the following:
    const myFirstSecret = process.env.FIRST_SECRET_KEY;

JSON WEB TOKENS (JWT)
- documentation: https://jwt.io/
- a structured method for keeping data secure and preventing data from being tampered with during the response/request cycle
- 3 Main parts:
- Header: holds data about the JWT itself
    {
        "alg": "HS256",     //signing algorithm used (HMAC SHA256 or RSA)
        "typ": "JWT"        //type of token used (JWT)
    }
- Payload: stores the desired claims/information
    - when a new JWT is created, it will create an object that represents the payload.
    - This payload will typically be the id of the user instance that was logged in
    - claims: statements about an entity (the user) and additional data
    - claim names are only 3 characters long as JWT is meant to be compact
    - for signed tokens, though protected against tampering, the payload is readable by anyone. 
    - secret information should not be put in the payload or header elements of a JWT unless it is encrypted.
        - registered: set of recommended but not mandatory, pre-defined claims
            - provides a set of useful, interoperable claims
            - i.e.  iss (issuer), exp (expiration time), sub (subject), aud (audience)
            - documentation: https://datatracker.ietf.org/doc/html/rfc7519#section-4.1
        - public:
            - defined at will by the JWT user
            - to avoid collisions must be defined:
                - in the IANA JSON Web Token Registry (https://www.iana.org/assignments/jwt/jwt.xhtml)
                - as a URI that contains a collision resistant namespace
            - documentation: https://datatracker.ietf.org/doc/html/rfc7519#section-4.2
        - private: custom claims created to share information between parties that agree on using them and are neither registered or public claims.
- Signature: signs the JWT
    - creation of the signature requires the encoded header, the encoded payload, a secret, and the algorithm specified by the header.
    - verifies that the content has not been tampered with
    - for private keys, verifies that the sender is authentic
- ouput: 3 Base64-URL strings separated by dots that can be easily passed in HTML and HTTP environments
    - syntax: xxxxx.yyyyy.zzzzz
- installation: npm install jsonwebtoken
- include the following in server.js:
    const jwt = require("jsonwebtoken");
- authorization: the most common scenario for JWT
    - after login, the JWT is included in every request to grant access to access routes, services, and resources that are permitted with that token. 
- information exchange: securely transmitting information between parties
    - signed JWT, using public/private key pairs, ensure that senders are who they say they are
    - the signature is calculated using both the header and payload, enabling verification that the content has not been tampered with.
- use jwt.io Debugger (https://jwt.io/#debugger-io) to decode, verify, and generate JWTs.

COOKIES
- documentation: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies
- HTTP cookies are a method for sending information between the client and server
- sent from the server and stored in the browser
- kept in the browser while the user is interacting with the site
- the JWT containing the user id is saved in a cookie
- typically used to tell if two requests come from the same browser â€” i.e. keeping a user logged in
- remembers stateful information for the stateless HTTP protocol
- cookies can be compromised via javascript in a cross site scripting attack
- HttpOnly cookies are invisible to client-side javaScript and can only be read by the server
- to prevent attacks, cookies should only be sent during secure sessions, using https
- not typically implemented in dev due to extra configuration required
- usually implemented in production via a secure flag in the cookie
- to see stored cookies (and other storage that a web page can use), enable the Storage Inspector in Developer Tools and select Cookies from the storage tree.

3 MAIN PURPOSES:
- session management: logins, shopping carts, game scores, or anything else the server should remember
    - session cookies are deleted when the current session ends. 
    - browser defines when the "current session" ends, and some browsers use session restoring when restarting. 
    This can cause session cookies to last indefinitely.
- personalization: user preferences, themes, and other settings
- tracking: recording and analyzing user behavior

COOKIES & EXPRESS
- installation: npm install cookie-parser
- add the following to server.js:
    const cookieParser = require('cookie-parser');
    ...
    app.use(cookieParser());
    // Change the app.use(cors()) to the one below
    app.use(cors({credentials: true, origin: 'http://localhost:3000'}));
- In a given response, set a cookie via the following:
    res.cookie("mycookie", "mydata", { httpOnly: true }).json({
    message: "This response has a cookie"
    });
- once the cookie is client side, the cookie can be sent with every request

ASYNC/AWAIT
- How to kick off another asynchronous action after a promise has resolved
- pause the execution of code until one or more promises have resolved
- syntax:
    1) async (outer function): allows us to await the resolution of promises inside the body
    2) await (inner function): the promise that we want to resolve before moving forward

    async function oneAfterAnother(startingVal) {
        const firstResult = await firstFunc(startingVal);
        const secondResult = await secondFunc(firstResult);
    
        return secondResult;
    }

- chained calls to then or catch can still be attached to the awaited promise
- otherwise, wrap code in try/catch block to prevent errors and the app crashing (if the promise is rejected):

    async function oneAfterAnother() {
        try {
            const firstResult = await firstFunc();
            const secondResult = await secondFunc(firstResult);
    
            return secondResult;
        } catch(err) {
            // do something with the error here
        }
    }

- documentation:
    http://callbackhell.com/
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await
    https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/ECMAScript_Next_support_in_Mozilla#ECMAScript_2017
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch

LOGIN/LOGOUT

STEPS
1) User inputs info into a form 
2) When the form is submitted, a request is sent to the server with the info
3) server-side: check to to see that user's credentials are correct
4) if the user's credentials are confirmed, a JWT is created and sent back to the client in the form of a cookie

login: async(req, res) => {
    //confirm if user exists via User.findOne
    const user = await User.findOne({ email: req.body.email });
 
    if(user === null) {
        // email not found in users collection
        return res.sendStatus(400);
    }
 
    //if the user exists, use bcrypt to compare the hashed password in the db to the plain text value supplied by the form
    const correctPassword = await bcrypt.compare(req.body.password, user.password);
 
    if(!correctPassword) {
        // password wasn't a match!
        return res.sendStatus(400);
    }
 
    //if the passwords match, create a JWT and send via a cookie
    const userToken = jwt.sign({
        id: user._id
    }, process.env.SECRET_KEY);
 
    // note that the response object allows chained calls to cookie and json
    res
        .cookie("usertoken", userToken, secret, {
            httpOnly: true
        })
        .json({ msg: "success!" });
}

REGISTER 
- once the user is successfully registered, log them in immediately as an added convenience

    register: (req, res) => {
    User.create(req.body)
        .then(user => {
            const userToken = jwt.sign({
                id: user._id
            }, process.env.SECRET_KEY);
    
            res
                .cookie("usertoken", userToken, secret, {
                    httpOnly: true
                })
                .json({ msg: "success!", user: user });
        })
        .catch(err => res.json(err));
    }

LOGOUT
- simply clear the usertoken cookie

    ...
    logout: (req, res) => {
        res.clearCookie('usertoken');
        res.sendStatus(200);
    }
    ...

AUTHORIZATION & MIDDLEWARE
- create a jwt.config.js to store the secret for sigining JWT and to create middleware function
- create an 'authenticate' function that checks the 'usertoken' cookie that should be present inside the 'cookies' object of request with the secret that we used when signing the JWT
- add a callback function that receives errors and a payload (info stored in the cookie 
- if there are errors, respond with a (401) error code and pass back an object signifying that the user attempting to access the route is not authenticated.

    const jwt = require("jsonwebtoken");
    const secret = "I can't believe this key is so secret!";
    module.exports.secret = secret;
    module.exports.authenticate = (req, res, next) => {
    jwt.verify(req.cookies.usertoken, secret, (err, payload) => {
        if (err) { 
        res.status(401).json({verified: false});
        } else {
        next();
        }
    });
    }

- the Middleware function can sit neatly between the url portion of the app.get() and the controller method.
- a user must login/register in order to access the /api/users/ route

    // inside of user.routes.js
    const Users = require('../controllers/user.controller');
    const { authenticate } = require('../config/jwt.config');
    module.exports = app => {
    app.post("/api/register", Users.register);
    app.post("/api/login", Users.login);

    // this route now has to be authenticated
    app.get("/api/users", authenticate, Users.getAll);
    }

- now that cookies are being used for authentication and authorization, each request should include:
    {withCredentials: true}
- this will send cookies with each request, so the Middleware will verify who is logged in